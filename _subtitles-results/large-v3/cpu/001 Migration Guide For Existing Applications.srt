1
00:00:00,000 --> 00:00:09,000
If you have been watching all the lectures sequentially one by one by this time, you must be comfortable with the virtual threads. Congrats!

2
00:00:09,000 --> 00:00:15,000
Now you will definitely want to migrate your existing application to use virtual threads.

3
00:00:15,000 --> 00:00:21,000
We have to take certain steps. We have to be careful. So that is what this quick lecture is about.

4
00:00:21,000 --> 00:00:24,000
We have only few steps, not a lot.

5
00:00:24,000 --> 00:00:29,000
We know that virtual threads are for IOTask only.

6
00:00:29,000 --> 00:00:35,000
Not for 100% pure compute task. Here we are not going to get any benefit.

7
00:00:35,000 --> 00:00:38,000
So this is where we are going to get benefit.

8
00:00:38,000 --> 00:00:44,000
So if your application has IOTask, yeah definitely you can use virtual threads.

9
00:00:44,000 --> 00:00:47,000
Here it does not make any sense.

10
00:00:47,000 --> 00:00:50,000
Check your application for synchronized keyword.

11
00:00:50,000 --> 00:00:53,000
The Java team said that it's a temporary issue.

12
00:00:53,000 --> 00:00:58,000
In the future they might fix. But in Java 21 we have this issue.

13
00:00:58,000 --> 00:00:59,000
So we have to fix it.

14
00:00:59,000 --> 00:01:03,000
But we have to be careful if you are planning to use virtual threads.

15
00:01:03,000 --> 00:01:08,000
So double check your synchronized method etc if you are doing IOOperation.

16
00:01:08,000 --> 00:01:11,000
In that case you have to use reentrant lock.

17
00:01:11,000 --> 00:01:14,000
You have to update your code.

18
00:01:14,000 --> 00:01:19,000
There is a very good chance that the third party libraries, they might be using this.

19
00:01:19,000 --> 00:01:20,000
Who knows.

20
00:01:20,000 --> 00:01:25,000
So you might want to run your application with this property to detect the pinned threads.

21
00:01:25,000 --> 00:01:28,000
If you see some pinned threads.

22
00:01:28,000 --> 00:01:29,000
And it's not because of you.

23
00:01:29,000 --> 00:01:31,000
It's because of some library.

24
00:01:31,000 --> 00:01:37,000
Then you will have to see if they are providing any new updated version for Java 21.

25
00:01:37,000 --> 00:01:40,000
In that case you might want to update the dependency as well.

26
00:01:40,000 --> 00:01:43,000
The thread builder is not thread safe.

27
00:01:43,000 --> 00:01:45,000
But the thread builder is new anyway.

28
00:01:45,000 --> 00:01:50,000
So if you are worrying about the existing application probably it's not applicable.

29
00:01:50,000 --> 00:01:53,000
Thread factory is thread safe.

30
00:01:53,000 --> 00:01:55,000
And the executor service.

31
00:01:55,000 --> 00:01:57,000
If your application is using executor service.

32
00:01:57,000 --> 00:02:00,000
Definitely you might be using one of these implementations.

33
00:02:00,000 --> 00:02:03,000
Because that is what we have had so far.

34
00:02:03,000 --> 00:02:04,000
Right.

35
00:02:04,000 --> 00:02:08,000
So but all these implementations they all will pull threads.

36
00:02:08,000 --> 00:02:11,000
That's how they all have been implemented.

37
00:02:11,000 --> 00:02:13,000
Because it is for platform threads.

38
00:02:13,000 --> 00:02:16,000
And the platform threads is an expensive resource.

39
00:02:16,000 --> 00:02:18,000
So it makes sense to pull threads there.

40
00:02:18,000 --> 00:02:21,000
But virtual thread is very cheap.

41
00:02:21,000 --> 00:02:23,000
And it should not be pulled.

42
00:02:23,000 --> 00:02:26,000
So do not pass the thread factory to these libraries.

43
00:02:26,000 --> 00:02:33,000
So we have to use the thread per task executor to use virtual threads.

44
00:02:33,000 --> 00:02:36,000
If we have to limit concurrency etc.

45
00:02:36,000 --> 00:02:39,000
Then we have to use some of them.

46
00:02:39,000 --> 00:02:43,000
Thread local will work with the virtual thread.

47
00:02:43,000 --> 00:02:46,000
Somehow Java team they made it work with the virtual thread.

48
00:02:46,000 --> 00:02:50,000
But double check if you really need it to use with the virtual threads.

49
00:02:50,000 --> 00:02:52,000
Do not store expensive objects.

50
00:02:52,000 --> 00:02:54,000
Because we can create millions of virtual threads.

51
00:02:54,000 --> 00:02:55,000
Right.

52
00:02:55,000 --> 00:02:58,000
So I would say be extra careful here.

53
00:02:58,000 --> 00:03:01,000
The spring team they will use thread local.

54
00:03:01,000 --> 00:03:03,000
And they will know how to use etc.

55
00:03:03,000 --> 00:03:05,000
So let's not worry about the framework.

56
00:03:05,000 --> 00:03:09,000
If you are using directly in your code somewhere.

57
00:03:09,000 --> 00:03:12,000
So here you have to be little bit more careful.

